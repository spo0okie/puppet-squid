acl localnet src 192.168.0.0/16	# Рабочая локалка
acl guestlan src 192.0.2.0/24	# гостевой вайфай

acl SSL_ports port 443
acl Safe_ports port 80		# http
acl Safe_ports port 21		# ftp
acl Safe_ports port 443		# https

acl CONNECT method CONNECT
acl SSL method CONNECT
acl PURGE method PURGE
acl CACHE proto cache_object

http_access allow manager localhost
http_access deny manager

http_access allow CACHE localhost
http_access allow PURGE localhost

http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports

icp_access deny all
htcp_access deny all

# Слушаем порты
# 3128 - для указания вручную
# 3129 - HTTP для перехвата (прозрачное проксирование)
# 3130 - HTTPS для перехвата (прозрачное проксирование)
http_port 3128 options=NO_SSLv3 connection-auth=off cert=/etc/squid/squidCA.pem
http_port 3129 intercept options=NO_SSLv3 connection-auth=off cert=/etc/squid/squidCA.pem
https_port 3130 intercept ssl-bump options=ALL:NO_SSLv3 connection-auth=off cert=/etc/squid/squidCA.pem

sslproxy_cert_error allow all
#sslproxy_flags DONT_VERIFY_PEER


# Запрещаем цеплятся на чисто IPшные адреса. Торенты и прочий мусор там
#acl numeric_IP url_regex ^http(s)?://([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)|(\[([0-9af]+)?:([0-9af:]+)?:([0-9af]+)?\])
acl numeric_IP url_regex ^http(s)?://[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(:[0-9]+)?
http_access deny numeric_IP


# объявляем черные и белые списки
acl white-list  dstdom_regex -i "/etc/squid/url-list/white.lst"
acl fun         dstdom_regex -i "/etc/squid/url-list/fun.txt"
acl proxy       dstdom_regex -i "/etc/squid/url-list/proxy.txt"
acl ads         dstdom_regex -i "/etc/squid/url-list/ads.txt"
acl fshares     dstdom_regex -i "/etc/squid/url-list/fshares.txt"
acl games       dstdom_regex -i "/etc/squid/url-list/games.txt"
acl porn        dstdom_regex -i "/etc/squid/url-list/porn.txt"
acl soc         dstdom_regex -i "/etc/squid/url-list/soc.txt"
acl dating      dstdom_regex -i "/etc/squid/url-list/dating.txt"
acl updates     dstdom_regex -i "/etc/squid/url-list/updates.txt"

acl fast_access dstdomain "/etc/squid/url-list/fast.lst"

#на белые списки ходить можно
http_access allow white-list all

#на черные нет
http_access deny fun all        #развлекательные сайты
http_access deny proxy all      #прокси, анонимайзеры
http_access deny ads all        #реклама
http_access deny fshares all    #файлообменники
http_access deny games all      #игры
http_access deny porn all       #порно
http_access deny soc all        #соцсети
http_access deny dating all     #знакомства
http_access deny updates all    #обновления


# Разрешаем ходить из локалки и гостевой сети
http_access allow localnet
http_access allow localhost

# Все остальное запрещаем
http_access deny all


#список блокируемых ресурсов.
#(ресурс идентифицируется подклядываением сертификат какого домена используется в HTTPS соединении)
#поэтому список - это список доменов может тут есть возможность regexp, но я не вкурсе
acl blocked ssl::server_name_regex  "/etc/squid/url-list/full.lst"

#быстрые ресурсы
acl fast ssl::server_name "/etc/squid/url-list/fast.lst"

# краткая справка:
# И для каждого из этих этапов можно определить, что Squid будет делать c запросами клиентов:
# splice - пропустить все последующие действия, т.е. просто поднимаем TCP-туннель, словно и нет никакого ssl-bump
# peek — подсмотреть всю доступную информацию без "влезания" в соединение
# terminate — закрыть соединение
# bump — "влезть" в соединение, сделать https видимым как http
# SslBump1 - получение открытой информации о соединении (из сертификатов и http-запроса);
# SslBump2 - передача Hello info клиента (создание соединения с сервером);
# SslBump3 - получение Hello info сервера (создание соединения с клиентом).

# Реализация фильтрации черных списков без MITM атаки:.
# идея содрана тут: https://habr.com/ru/post/267851/
# немного взято отсюда: https://forum.lissyara.su/freebsd-f8/freebsd-11-squid-4-5-prozrachnoe-proksirovanie-s-p-t45437.html

# Мы просто подглядываем каким сертификатом подписаны запросы, не вмешиваясь в этот диалог, если все ок
# Но если все не ок (соединение подписано сертификатом домена из чернго списка), то про дропаем соединение
# Т.е. тут вмешиваемся, но без генерирования сертификатов и всего такого что обычно бывает при
# MITM в HTTPS

acl step1 at_step SslBump1
ssl_bump peek step1

#терминируем соединение, если клиент заходит на запрещенный ресурс
ssl_bump terminate blocked
ssl_bump splice all


#sslcrtd_program /usr/lib/squid/ssl_crtd -s /var/lib/ssl_db -M 4MB
sslcrtd_program /usr/libexec/security_file_certgen -s /var/lib/ssl_db -M 4MB

coredump_dir /var/spool/squid

refresh_pattern		^ftp:			1440	20%		10080
refresh_pattern		^gopher:		1440	0%		1440
refresh_pattern	-i	/cgi-bin/|?		0		0%		0
refresh_pattern		.				0		20%		4320
logfile_rotate 4

pid_filename /var/run/squid.pid

access_log /var/log/squid/access.log
cache_log /var/log/squid/cache.log
include /etc/squid/pools2.conf

#Включаем кэширование, но учитывая что везде практически один HTTPS, я чот не заметил эффекта
cache_dir ufs /var/spool/squid 2048 16 256

# Leave coredumps in the first cache dir
coredump_dir /var/spool/squid
#debug_options rotate=4 28,9